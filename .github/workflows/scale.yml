name: Scale ECS Services

on:
  workflow_dispatch:
    inputs:
      service:
        description: "Service to scale"
        required: true
        type: choice
        options:
          - all
          - backend
          - client
          - dashboard

      action:
        description: "Action to perform"
        required: true
        type: choice
        options:
          - up
          - down

env:
  CLUSTER_NAME: aura-vote
  REGION: ap-southeast-1

jobs:
  scale:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Scale Services
        run: |
          TARGET_COUNT=0
          if [[ "${{ github.event.inputs.action }}" == "up" ]]; then
            TARGET_COUNT=1
          fi

          # Scale backend
          if [[ "${{ github.event.inputs.service }}" == "backend" || "${{ github.event.inputs.service }}" == "all" ]]; then
            BACKEND_SERVICE="aura-vote-backend-service"
            echo "Scaling $BACKEND_SERVICE to $TARGET_COUNT"
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $BACKEND_SERVICE \
              --desired-count $TARGET_COUNT
          fi

          # Scale client
          if [[ "${{ github.event.inputs.service }}" == "client" || "${{ github.event.inputs.service }}" == "all" ]]; then
            CLIENT_SERVICE="aura-vote-client-service"
            echo "Scaling $CLIENT_SERVICE to $TARGET_COUNT"
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $CLIENT_SERVICE \
              --desired-count $TARGET_COUNT
          fi

          # Scale dashboard
          if [[ "${{ github.event.inputs.service }}" == "dashboard" || "${{ github.event.inputs.service }}" == "all" ]]; then
            DASHBOARD_SERVICE="aura-vote-dashboard-service"
            echo "Scaling $DASHBOARD_SERVICE to $TARGET_COUNT"
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $DASHBOARD_SERVICE \
              --desired-count $TARGET_COUNT
          fi
